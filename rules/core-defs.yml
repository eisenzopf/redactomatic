entities:
  _SPACY_:
    redactor:
      model-class: redact.RedactorSpacy

  MONEY:
    anonymizer:
      model-class: anonymize.AnonRegex
      voice:
        regex-id: money-voice-gen
      text:
        regex-id: money-text-gen

  DATE:
    anonymizer:
      model-class: anonymize.AnonRegex
      voice:
        regex-id: date-voice-gen
      text:
        regex-id: date-text-gen

  EVENT:
    anonymizer:
      model-class: anonymize.AnonRegex
      voice:
        regex-id: event-gen
      text:
        regex-id: event-gen

  FAC:
    anonymizer:
      model-class: anonymize.AnonNullString

  LANGUAGE:
    anonymizer:
      model-class: anonymize.AnonRegex
      text:
        regex-id: language-gen
      voice:
        regex-id: language-gen

  LAUGHTER:
    anonymizer:
      model-class: anonymize.AnonNullString

  LAW:
    anonymizer:
      model-class: anonymize.AnonNullString

  PERCENT:
    anonymizer:
      model-class: anonymize.AnonRegex
      voice:
        regex-id: percent-voice-gen
      text:
        regex-id: percent-text-gen

  PRODUCT:
    anonymizer:
      model-class: anonymize.AnonRegex
      voice:
        regex-id: product-gen
      text:
        regex-id: product-gen

  QUANTITY:
    anonymizer:
      model-class: anonymize.AnonRegex
      voice:
        regex-id: 1-9999-voice-gen
      text:
        regex-id: 1-9999-text-gen

  TIME:
    anonymizer:
      model-class: anonymize.AnonRegex
      voice:
        regex-id: time-voice-gen
      text:
        regex-id: time-text-gen

  LOC:
    anonymizer:
      model-class: anonymize.AnonPhraseList
      text:
        phrase-filename: $REDACT_HOME/data/us-area-code-cities.csv
        phrase-field: city
      voice:
        phrase-filename: $REDACT_HOME/data/us-area-code-cities.csv
        phrase-field: city

  GPE:
    anonymizer:
      model-class: anonymize.AnonPhraseList
      text:
        phrase-filename: $REDACT_HOME/data/gpe.csv
        phrase-header: False
        phrase-column: 0
      voice:
        phrase-filename: $REDACT_HOME/data/gpe.csv
        phrase-header: False
        phrase-column: 0

  ORG:
    anonymizer:
      model-class: anonymize.AnonPhraseList
      text:
        phrase-filename: $REDACT_HOME/data/Top-100-Retailers.csv
        phrase-field: Company
      voice:
        phrase-filename: $REDACT_HOME/data/Top-100-Retailers.csv
        phrase-field: Company

  NORP:
    anonymizer:
      model-class: anonymize.AnonPhraseList
      text:
        phrase-filename: $REDACT_HOME/data/nationalities.csv
        phrase-field: Nationality
      voice:
        phrase-filename: $REDACT_HOME/data/nationalities.csv
        phrase-field: Nationality

  PERSON:
    anonymizer:
      model-class: anonymize.AnonPhraseList
      text:
        phrase-filename: $REDACT_HOME/data/baby-names.csv
        phrase-field: name
      voice:
        phrase-filename: $REDACT_HOME/data/baby-names.csv
        phrase-field: name

  WORK_OF_ART:
    anonymizer:
      model-class: anonymize.AnonPhraseList
      text:
        phrase-filename: $REDACT_HOME/data/Artworks.csv
        phrase-field: Title
      voice:
        phrase-filename: $REDACT_HOME/data/Artworks.csv
        phrase-field: Title

  ZIP:
    redactor:
      model-class: redact.RedactorRegex
      text:
        regex-id: zip-text
        group: zip
      voice:
        regex-id: zip-voice
        group: zip
    anonymizer:
      model-class: anonymize.AnonZipC
      text:
        phrase-filename: $REDACT_HOME/data/zip_code_database.csv
        phrase-field: zip
      voice:
        phrase-filename: $REDACT_HOME/data/zip_code_database.csv
        phrase-field: zip

  SSN:
    redactor:
      model-class: redact.RedactorRegex
      text:
        regex-id: ssn
        group: ssn
      voice:
        regex-id: ssn-voice
        group: ssn
    anonymizer:
      model-class: anonymize.AnonSSN

  CCARD:
    redactor:
      model-class: redact.RedactorRegex
      text:
        regex-id: ccard-text
      voice:
        regex-id: ccard-voice
    anonymizer:
      model-class: anonymize.AnonRegex
      voice:
        regex-id: ccard-voice-gen
      text:
        regex-id: ccard-text-gen

  ADDRESS:
    redactor:
      model-class: redact.RedactorRegex
      text:
        regex-id: address
      voice:
        regex-id: address
    anonymizer:
      model-class: anonymize.AnonAddress
      text:
        phrase-filename: $REDACT_HOME/data/street-names.csv
        phrase-field: Streets
      voice:
        phrase-filename: $REDACT_HOME/data/street-names.csv
        phrase-field: Streets

  EMAIL:
    redactor:
      model-class: redact.RedactorRegex
      text:
        regex-id: email
      voice:
        regex-id: email
    anonymizer:
      model-class: anonymize.AnonPhraseList
      text:
        - phrase-filename: $REDACT_HOME/data/baby-names.csv
          phrase-field: name
        - phrase-list: [ '@gmail.com', '@yahoo.com', '@hotmail.com', '@icloud.com', '@msn.com' ]
      voice:
        - phrase-filename: $REDACT_HOME/data/baby-names.csv
          phrase-field: name
        - phrase-list: [ '@gmail.com', '@yahoo.com', '@hotmail.com', '@icloud.com', '@msn.com' ]

  PHONE:
    redactor:
      model-class: redact.RedactorRegex
      text:
        regex-id: phone-text
      voice:
        regex-id: phone-voice
    anonymizer:
      model-class: anonymize.AnonPhone

  ORDINAL:
    redactor:
      model-class: redact.RedactorRegex
      text:
        regex-id: ordinal
      voice:
        regex-id: ordinal
    anonymizer:
      model-class: anonymize.AnonRegex
      text:
        regex-id: ordinal-text-gen
      voice:
        regex-id: ordinal-voice-gen

  CARDINAL:
    redactor:
      model-class: redact.RedactorRegex
      text:
        regex-id: cardinal-text
      voice:
        regex-id: cardinal-voice
    anonymizer:
      model-class: anonymize.AnonRegex
      text:
        regex-id: cardinal-text-gen
      voice:
        regex-id: cardinal-voice-gen

  PIN:
    redactor:
      model-class: redact.RedactorRegex
      text:
        regex-id: pin-text
        group: pin
      voice:
        regex-id: pin-voice
        group: pin
    anonymizer:
      model-class: anonymize.AnonRegex
      text:
        regex-id: 4-digit-text-gen
      voice:
        regex-id: 4-digit-voice-gen

#### REGULAR EXPRESSIONS ###

regex:
  4-digit-text-gen:
    - '[0-9]{4}'

  4-digit-voice-gen:
    - '( (zero|one|two|three|four|five|six|seven|eight|nine)){4}'

  1-9999-text-gen:
    #1-9999
    - '([1-9][0-9]{0,1}[0-9]{0,1}[0-9]{0,1})'

  1-9999-voice-gen:
    #one - niney nine hundred and ninety nine
    - >
      (
        (
          (
            (one|two|three|four|five|six|seven|eight|nine|ten|eleven|twelve|thirteen|fourteen|fifteen|sixteen|seventeen|eighteen|nineteen) |
            (twenty|thirty|forty|fifty|sixty|seventy|eighty|ninety) (one|two|three|four|five|six|seven|eight|nine)
          )
          ( hundred and)
        ){0,1}
        (
          (one|two|three|four|five|six|seven|eight|nine|ten|eleven|twelve|thirteen|fourteen|fifteen|sixteen|seventeen|eighteen|nineteen) |
          (twenty|thirty|forty|fifty|sixty|seventy|eighty|ninety) (one|two|three|four|five|six|seven|eight|nine)
        )
      )

  product-gen:
    - 'cheese|beef|milk|corn|couch|chair|table|window|stove|desk'

  percent-text-gen:
    - '([1-9][0-9]{0,1})\%' #1-99%

  percent-voice-gen:
    - >
      (
        (one|two|three|four|five|six|seven|eight|nine|ten|eleven|twelve|thirteen|fourteen|fifteen|sixteen|seventeen|eighteen|nineteen) |
        (twenty|thirty|forty|fifty|sixty|seventy|eighty|ninety) (one|two|three|four|five|six|seven|eight|nine)
      ) percent

  ordinal-text-gen:
    - '1st|2nd|3rd|4th|5th|6th|7th|8th|9th|10th'

  ordinal-voice-gen:
    - 'first|second|third|fourth|fifth|sixth|seventh|eighth|ninth|tenth'

  money-text-gen:
    - '\$([1-9]\d{0,2})(\.\d{2}){0,1}'

  money-voice-gen:
    - '(twenty|thirty|forty|fifty|sixty|seventy|eighty|ninety) (one|two|three|four|five|six|seven|eight|nine|) dollars ((twenty|thirty|forty|fifty|sixty|seventy|eighty|ninety|) (one|two|three|four|five|six|seven|eight|nine) cents){0,1}'
    - '(ten|eleven|twelve|thirteen|fourteen|fifteen|sixteen|seventeen|eighteen|nineteen|) dollars ((twenty|thirty|forty|fifty|sixty|seventy|eighty|ninety|) (one|two|three|four|five|six|seven|eight|nine) cents){0,1}'

  event-gen:
    - 'seminar|conference|trade show|workshop|reunion|party|gala|picnic|meeting|lunch'

  ccard-text-gen:
    - '4\d{3}-\d{4}-\d{4}-\d{4}' # visa
    - '3[47]\d{2}-\d{6}-\d{5}' # amex

  ccard-voice-gen:
    - 'four ( (zero|oh|one|two|three|four|five|six|seven|eight|nine)){15}' # visa
    - 'three ( (zero|oh|one|two|three|four|five|six|seven|eight|nine)){14}' # amex

  cardinal-text-gen:
    - ' (0|1|2|3|4|5|6|7|8|9) '

  cardinal-voice-gen:
    - ' (zero|one|two|three|four|five|six|seven|eight|nine) '

  date-voice-gen:
    - '(January|February|March|April|May|June|July|August|September|October|November|December) (first|second|third|fourth|fifth|sixth|seventh|eighth|ninth|tenth|eleventh|twelfth|thirteenth|fourteenth|fifteenth|sixteenth|seventeenth|eighteenth|nineteenth|twentieth|twenty first|twenty second|twenty third|twenty fourth|twenty fifth|twenty sixth|twenty seventh|twenty eighth)'

  date-text-gen:
    - '(01|02|03|04|05|06|07|08|09|10|11|12)\/(0|1|2)[0-9]\/20(20|21|22|23|24|25|26)'

  time-text-gen:
    - '(01|02|03|04|05|06|07|08|09|10|11|12):(0|1|2|3|4|5)[0-9] (AM|PM)'

  time-voice-gen:
    - '(one|two|three|four|five|six|seven|eight|nine|ten|eleven|twelve) (oh|twenty|thirty|forty|fifty) (one|two|three|four|five|six|seven|eight|nine) (AM|PM)'
    - '(one|two|three|four|five|six|seven|eight|nine|ten|eleven|twelve) (|ten|twenty|thirty|forty|fifty) (AM|PM)'
    - '(one|two|three|four|five|six|seven|eight|nine|ten|eleven|twelve) (eleven|twelve|thirteen|fourteen|fifteen|sixteen|seventeen|eighteen|nineteen) (AM|PM)'

  language-gen:
    - 'Chinese|Spanish|English|Hindi|Arabic|Portuguese|Russian|German|Korean|French|Turkish'

  pin-text:
    # chat-yes, voice-no
    - (^|\s)(?<pin>(?:(\d{4})))\s*?

  zero_to_nine-voice:
      - >
        (?<zero_to_nine>
        (?:(one|two|three|four|five|six|seven|eight|nine|zero|oh|0z))
        )

  oh_to_nine-voice:
      - >
        (?<oh_to_nine>
        (?:(one|two|three|four|five|six|seven|eight|nine|oh|0z))
        )

  pin-voice:
    # chat-no, voice-yes
    - >
      (?xi)
      (?(DEFINE)?INCLUDE<oh_to_nine-voice>)
      (^|\s)(?<pin>(?:(?&oh_to_nine)\s?(?&oh_to_nine)\s?(?&oh_to_nine)\s?(?&oh_to_nine)))(?!\s*)?

  phone-voice:
    # chat-no, voice-yes
    - >
      (?xi)
      (?(DEFINE)?INCLUDE<oh_to_nine-voice>)
      (^|\s)(?:(?&oh_to_nine)\s?(?&oh_to_nine)\s?(?&oh_to_nine)[\s,]{1,2}
      (?&oh_to_nine)\s?(?&oh_to_nine)\s?(?&oh_to_nine)[\s,]{1,2}
      (?&oh_to_nine)\s?(?&oh_to_nine)\s?(?&oh_to_nine)\s?(?&oh_to_nine))(?!\s*)?

  phone-text:
    # chat-yes, voice-no
    - ((?:(?<![\d-])(?:\+?\d{1,3}[-.\s*]?)?(?:\(?\d{3}\)?[-.\s*]?)?\d{3}[-.\s*]?\d{4}(?![\d-]))|(?:(?<![\d-])(?:(?:\(\+?\d{2}\))|(?:\+?\d{2}))\s*\d{2}\s*\d{3}\s*\d{4}(?![\d-])))

  email:
    # chat-yes, voice-yes
    - '[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,}'

  cardinal-definitions:
    # voice-yes, chat-yes
    - >
      (?xi)
      (?(DEFINE)
        (?<one_to_9>
        (?:\m(one|two|three|four|five|six|seven|eight|nine)\M)
        ) # end one_to_9 definition

        (?<ten_to_19>
        (?:\m(ten|eleven|twelve|thirteen|fourteen|fifteen|sixteen|seventeen|eighteen|nineteen)\M)
        ) # end ten_to_19 definition

        (?<two_digit_prefix>
        (?:\m(s(?:even|ix)|t(?:hir|wen)|f(?:if|or)|eigh|nine)ty)\M
        ) # end two_digit_prefix definition

        (?<one_to_99>
        (?&two_digit_prefix)(?:[- ](?&one_to_9))?|(?&ten_to_19)|
                                                    (?&one_to_9)
        ) # end one_to_99 definition

        (?<one_to_999>
        (?&one_to_9)[ ]hundred(?:[ ](?:and[ ])?(?&one_to_99))?|
                                                  (?&one_to_99)
        ) # end one_to_999 definition

        (?<one_to_999_999>
        (?&one_to_999)[ ]thousand(?:[ ](?&one_to_999))?|
                                          (?&one_to_999)
        ) # end one_to_999_999 definition

        (?<one_to_999_999_999>
        (?&one_to_999)[ ]million(?:[ ](?&one_to_999_999))?|
                                        (?&one_to_999_999)
        ) # end one_to_999_999_999 definition

        (?<one_to_999_999_999_999>
        (?&one_to_999)[ ]billion(?:[ ](?&one_to_999_999_999))?|
                                        (?&one_to_999_999_999)
        ) # end one_to_999_999_999_999 definition

        (?<one_to_999_999_999_999_999>
        (?&one_to_999)[ ]trillion(?:[ ](?&one_to_999_999_999_999))?|
                                          (?&one_to_999_999_999_999)
        ) # end one_to_999_999_999_999_999 definition

        (?<bignumber>
        ((\mzero\M|(?&one_to_999_999_999_999_999)))
        ) # end bignumber definition

        (?<zero_to_9>
        (?&one_to_9)
        ) # end zero to 9 definition

        (?<decimals>
        point(?:[ ](?&zero_to_9))+
        ) # end decimals definition
      ) # End DEFINE

  cardinal-text:
    # Detects written numbers such as 'one hundred and twenty' and also every instance of [0-9]
    # The rule \[\w+-\d+\] detects existing redacted tokens such as [PERSON-1]. 
    # The RedactorRegex class then specifically defends these tokens to make sure that the (\d+) 
    # pattern doesn't redact existing labels.
    >  
      ?INCLUDE<cardinal-definitions>
      (?&bignumber)|(\d+)
  
  cardinal-voice:
    # detect written numbers such as 'one hundred and twenty' but do not detect [0-9].
    - >  
      ?INCLUDE<cardinal-definitions>
      (?&bignumber)

  address:
    # chat-yes, voice-no
    - '(?<address1>(?>\d{1,6}(?>\ 1\/[234])?( (N(orth)?|S(outh)?)? ?(E(ast)?|W(est)?))?((?> \d+ ?(th|rd|st|nd))|(?> [A-Z](?>[a-z])+)+) (?>(?i)THROUGHWAY|TRAFFICWAY|CROSSROADS|EXPRESSWAY|BOULEVARD|CROSSROAD|EXTENSION|JUNCTIONS|MOUNTAINS|STRAVENUE|UNDERPASS|CAUSEWAY|CRESCENT|CROSSING|JUNCTION|MOTORWAY|MOUNTAIN|OVERPASS|PARKWAYS|TURNPIKE|VILLIAGE|VILLAGES|CENTERS|CIRCLES|COMMONS|CORNERS|ESTATES|EXPRESS|FORESTS|FREEWAY|GARDENS|GATEWAY|HARBORS|HIGHWAY|HOLLOWS|ISLANDS|JUNCTON|LANDING|MEADOWS|MOUNTIN|ORCHARD|PARKWAY|PASSAGE|PRAIRIE|RANCHES|SPRINGS|SQUARES|STATION|STRAVEN|STRVNUE|STREETS|TERRACE|TRAILER|TUNNELS|VALLEYS|VIADUCT|VILLAGE|ALLEE|ARCADE|AVENUE|BLUFFS|BOTTOM|BRANCH|BRIDGE|BROOKS|BYPASS|CANYON|CAUSWA|CENTER|CENTRE|CIRCLE|CLIFFS|COMMON|CORNER|COURSE|COURTS|CRSENT|CRSSNG|DIVIDE|DRIVES|ESTATE|EXTNSN|FIELDS|FOREST|FORGES|FREEWY|GARDEN|GATEWY|GATWAY|GREENS|GROVES|HARBOR|HIGHWY|HOLLOW|ISLAND|ISLNDS|JCTION|JUNCTN|KNOLLS|LIGHTS|MANORS|MEADOW|MEDOWS|MNTAIN|ORCHRD|PARKWY|PLAINS|POINTS|RADIAL|RADIEL|RAPIDS|RIDGES|SHOALS|SHOARS|SHORES|SKYWAY|SPRING|SPRNGS|SQUARE|STRAVN|STREAM|STREME|STREET|SUMITT|SUMMIT|TRACES|TRACKS|TRAILS|TUNNEL|TURNPK|UNIONS|VALLEY|VIADCT|VILLAG|ALLEE|ALLEY|ANNEX|AVENU|AVNUE|BAYOO|BAYOU|BEACH|BLUFF|BOTTM|BOULV|BRNCH|BRDGE|BROOK|BURGS|BYPAS|CANYN|CENTR|CNTER|CIRCL|CRCLE|CLIFF|COURT|COVES|CREEK|CRSNT|CREST|CURVE|DRIVE|FALLS|FERRY|FIELD|FLATS|FORDS|FORGE|FORKS|FRWAY|GARDN|GRDEN|GRDNS|GTWAY|GLENS|GREEN|GROVE|HARBR|HRBOR|HAVEN|HIWAY|HILLS|HOLWS|ISLND|ISLES|JCTNS|KNOLL|LAKES|LNDNG|LIGHT|LOCKS|LODGE|LOOPS|MANOR|MILLS|MISSN|MOUNT|MNTNS|PARKS|PKWAY|PKWYS|PATHS|PIKES|PINES|PLAIN|PLAZA|POINT|PORTS|RANCH|RNCHS|RAPID|RIDGE|RIVER|ROADS|ROUTE|SHOAL|SHOAR|SHORE|SPRNG|SPNGS|SPURS|STATN|STRAV|STRVN|SUMIT|TRACE|TRACK|TRAIL|TRLRS|TUNEL|TUNLS|TUNNL|TRNPK|UNION|VALLY|VIEWS|VILLG|VILLE|VISTA|WALKS|WELLS|ALLY|ANEX|ANNX|AVEN|BEND|BLUF|BLVD|BOUL|BURG|BYPA|BYPS|CAMP|CNYN|CAPE|CSWY|CENT|CNTR|CIRC|CRCL|CLFS|CLUB|CORS|CRSE|COVE|CRES|XING|DALE|DRIV|ESTS|EXPR|EXPW|EXPY|EXTN|EXTS|FALL|FRRY|FLDS|FLAT|FLTS|FORD|FRST|FORG|FORK|FRKS|FORT|FRWY|GRDN|GDNS|GTWY|GLEN|GROV|HARB|HIWY|HWAY|HILL|HLLW|HOLW|INLT|ISLE|JCTN|JCTS|KEYS|KNOL|KNLS|LAKE|LAND|LNDG|LANE|LOAF|LOCK|LCKS|LDGE|LODG|LOOP|MALL|MNRS|MDWS|MEWS|MILL|MSSN|MNTN|MTIN|NECK|ORCH|OVAL|PARK|PKWY|PASS|PATH|PIKE|PINE|PNES|PLNS|PLZA|PORT|PRTS|RADL|RAMP|RNCH|RPDS|REST|RDGE|RDGS|RIVR|ROAD|SHLS|SHRS|SPNG|SPGS|SPUR|SQRE|SQRS|STRA|STRM|STRT|TERR|TRCE|TRAK|TRKS|TRLS|TRLR|TUNL|VLLY|VLYS|VDCT|VIEW|VILL|VLGS|VIST|VSTA|WALK|WALL|WAYS|WELL|ALY|ANX|ARC|AVE|AVN|BCH|BND|BLF|BOT|BTM|BRG|BRK|BYP|CMP|CPE|CEN|CTR|CIR|CLF|CLB|COR|CTS|CRK|DAM|DIV|DVD|DRV|EST|EXP|EXT|FLS|FRY|FLD|FLT|FRD|FRG|FRK|FRT|FWY|GLN|GRN|GRV|HBR|HVN|HTS|HWY|HLS|ISS|JCT|KEY|KYS|KNL|LKS|LGT|LCK|LDG|MNR|MDW|MNT|MTN|NCK|OVL|PRK|PKY|PLN|PLZ|PTS|PRT|PRR|RAD|RPD|RST|RDG|RIV|RVR|RDS|ROW|RUE|RUN|SHL|SHR|SPG|SQR|SQU|STA|STN|STR|SMT|TER|TRK|TRL|VLY|VIA|VWS|VLG|VIS|VST|WAY|WLS|AV|BR|CP|CT|CV|DL|DM|DV|DR|FT|HT|HL|IS|KY|LK|LN|LF|MT|PL|PT|PR|RD|SQ|ST|UN|VW|VL|WY))( (N(orth)?|S(outh)?)? ?(E(ast)?|W(est)?)?)?)'

  ccard-text:
    # chat-yes, voice-no
    - '(?:\d[ -]*?){13,16}'

  ccard-voice:
    # chat-no, voice-yes
    - >
      (?xi)
        (?(DEFINE)
          (?<zero_to_7>
            (?:(one|two|three|four|five|six|seven|oh|zero))
          )
          (?<zero_to_9>
            (?:(one|two|three|four|five|six|seven|eight|nine|oh|zero))
          )
          (?<visa>
            (?:(four|for)\s((?&zero_to_9)\s){14}(?&zero_to_9))
          )
          (?<mastercard>
            (?:five\s(one|two|to|three|four|for|five)\s((?&zero_to_9)\s){13}(?&zero_to_9))
          )
          (?<amex>
            (?:three\s(four|for|seven)\s((?&zero_to_9)\s){12}(?&zero_to_9))
          )
        )
      (?<ccard>(?:(?&visa)|(?&mastercard)|(?&amex)))

  ssn:
    # chat-yes, voice-no
    - '(^|\s)(?<ssn>(?!000|666)[0-8][0-9]{2}(-|\s)?(?!00)[0-9]{2}(-|\s)?(?!0000)[0-9]{4})(\s|$|\.)'

  ssn-voice:
    # chat-no, voice-yes
    - >
      (?xi)
        (?(DEFINE)
          (?<zero_to_7>(?:(one|two|three|four|five|six|seven|oh|zero)))
          (?<zero_to_9>(?:(one|two|three|four|five|six|seven|eight|nine|oh|zero)))
        )
      (?<ssn>(?:(?&zero_to_7)\s((?&zero_to_9)\s){7}(?&zero_to_9)))

  zip-text:
    # chat-yes, voice-no supports US zip+4 and Canadian postal codes
    - '((?<full>(?<part1>[ABCEGHJKLMNPRSTVXY]{1}\d{1}[A-Z]{1})(?:[ ](?=\d))?(?<part2>\d{1}[A-Z]{1}\d{1}))$)|((^|\s{1})(?<zip>(?!00[02-5]|099|213|269|34[358]|353|419|42[89]|51[789]|529|53[36]|552|5[67]8|5[78]9|621|6[348]2|6[46]3|659|69[4-9]|7[034]2|709|715|771|81[789]|8[3469]9|8[4568]8|8[6-9]6|8[68]7|9[02]9|987)\d{5})(\s|\.|$|\-(?<plus4>[0-9]{4})?))'

  zip-voice:
    # chat-no, voice-yes
    - >
      (?xi)
      (?(DEFINE)?INCLUDE<oh_to_nine-voice>)
      (^|\s)(?<zip>(?:(?&oh_to_nine)\s?(?&oh_to_nine)\s?(?&oh_to_nine)\s?(?&oh_to_nine)\s?(?&oh_to_nine)))(?!\s*)?

  ordinal:
    # voice-yes, chat-yes
    - >
      (?x)
      (?(DEFINE)
        (?<one_to_9>
        (fir|seco|thi|four|fif|six|seven|eigh|nin|[1-9])(?:st|nd|rd|th)
        ) # end one_to_9 definition

        (?<ten_to_19>
        (?:(?:(ten|eleven|twelf)|((?:thir|four|fif|six|seven|eigh|nine)teen))th|((10|11|12|13|14|15|16|17|18|19)th))
        ) # end ten_to_19 definition

        (?<two_digit_ordinal_prefix>
        ((?:s(?:even|ix)|t(?:hir|wen)|f(?:if|or)|eigh|nine)tieth)|((2|3|4|5|6|7|8|9)0)th
        ) # end two_digit_prefix definition

        (?<two_digit_prefix>
        ((?:s(?:even|ix)|t(?:hir|wen)|f(?:if|or)|eigh|nine)ty)
        ) # end two_digit_prefix definition

        (?<numeric_ordinal>
        ([2-9][1-9](st|nd|rd|th))
        )

        (?<one_to_99>
        (?&two_digit_ordinal_prefix)|(?&numeric_ordinal)|(?&two_digit_prefix)(?:[- ](?&one_to_9))|(?&ten_to_19)|(?&one_to_9)
        ) # end one_to_99 definition

        (?<one_to_999>
        (?&one_to_9)[ ]hundred(?:[ ](?:and[ ])?(?&one_to_99))?|
                                                  (?&one_to_99)
        ) # end one_to_999 definition

        (?<one_to_999_999>
        (?&one_to_999)[ ]thousand(?:[ ](?&one_to_999))?|
                                          (?&one_to_999)
        ) # end one_to_999_999 definition

        (?<one_to_999_999_999>
        (?&one_to_999)[ ]million(?:[ ](?&one_to_999_999))?|
                                        (?&one_to_999_999)
        ) # end one_to_999_999_999 definition

        (?<one_to_999_999_999_999>
        (?&one_to_999)[ ]billion(?:[ ](?&one_to_999_999_999))?|
                                        (?&one_to_999_999_999)
        ) # end one_to_999_999_999_999 definition

        (?<one_to_999_999_999_999_999>
        (?&one_to_999)[ ]trillion(?:[ ](?&one_to_999_999_999_999))?|
                                          (?&one_to_999_999_999_999)
        ) # end one_to_999_999_999_999_999 definition

        (?<bignumber>
        (?&one_to_999_999_999_999_999)
        ) # end bignumber definition

        (?<zero_to_9>
        (?&one_to_9)
        ) # end zero to 9 definition

        (?<decimals>
        point(?:[ ](?&zero_to_9))+
        ) # end decimals definition
      ) # End DEFINE

      ####### The Regex Matching Starts Here ########
      #(?&bignumber)(?:[ ](?&decimals))?

      ### Other examples of groups we could match ###
        (?&bignumber)

      # (?&one_to_99)
      # (?&one_to_999)
      # (?&one_to_999_999)
      # (?&one_to_999_999_999)
      # (?&one_to_999_999_999_999)
      # (?&one_to_999_999_999_999_999)
